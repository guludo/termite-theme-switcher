#!/bin/env python

from argparse import ArgumentParser, SUPPRESS
from glob import glob
import fnmatch
import json
import os
import os.path
import shutil
import subprocess
import sys

HOME = os.path.expanduser('~')
DEFAULT_THEMES_DIR = os.getenv('TERMITE_THEMES', os.path.join(HOME, 'termite-themes'))
TERMITE_CONFIG_FILE = os.path.join(HOME, '.config', 'termite', 'config')
DATA_DIR = os.path.join(HOME, '.termite-tools', 'theme')
CURRENT_THEME_FILE = os.path.join(DATA_DIR, 'current')
TAGS_FILE = os.path.join(DATA_DIR, 'tags')

class Error(Exception):
    pass

def get_themes(args, pattern=None, full_path=False):
    if pattern is None:
        pattern = '*'
    else:
        pattern = '*{}*'.format(pattern)

    return [
        (path if full_path else path[len(args.themes_dir) + len(os.path.sep):])
        for path in sorted(glob(os.path.join(args.themes_dir, pattern)))
    ]

def get_current_theme():
    try:
        with open(CURRENT_THEME_FILE) as f:
            return str(f.read()).strip()
    except:
        return None

def find_section_slice(lines, name):
    begin = -1
    for i, line in enumerate(lines):
        line = line.strip()
        if begin == -1:
            if line.startswith('[{}]'.format(name)):
                begin = i
        else:
            if line and line[0] == '[':
                return slice(begin, i)
    if begin >= 0:
        return slice(begin, len(lines))

    return None

def find_theme_path(args, name):
    l = get_themes(args, name, full_path=True)
    if not l:
        raise Error('theme {} not found'.format(name))
    if len(l) > 1:
        raise Error('more than one match for theme {}'.format(name))
    return l[0]

def set_theme(args, name):
    path = find_theme_path(args, name)
    with open(TERMITE_CONFIG_FILE) as f:
        config_lines = f.readlines()

    with open(path) as f:
        theme_lines = f.readlines()

    config_slice = find_section_slice(config_lines, 'colors')
    if not config_slice:
        config_slice = slice(len(config_lines), len(config_lines))

    theme_slice = find_section_slice(theme_lines, 'colors')
    if not theme_slice:
        raise Error('unable to find [colors] section in {}'.format(path))

    config_lines[config_slice] = theme_lines[theme_slice]

    shutil.copyfile(TERMITE_CONFIG_FILE, os.path.join(DATA_DIR, 'termite.bkp.conf'))

    with open(TERMITE_CONFIG_FILE, 'w') as f:
        f.writelines(config_lines)

    with open(os.path.join(CURRENT_THEME_FILE), 'w') as f:
        print(path[len(args.themes_dir) + len(os.path.sep):], end='', file=f)

def reload_current_windows():
    if os.getenv('XDG_SESSION_TYPE') == 'x11':
        subprocess.check_call('termite-reload-x-windows')

def load_tags(args):
    try:
        with open(TAGS_FILE) as f:
            tags = json.load(f)
    except FileNotFoundError:
        tags = {}
        write_tags(tags, bkp=False)

    available_themes = set(get_themes(args))
    r = {}
    for tag, themes in tags.items():
        themes = set(themes) & available_themes
        if themes:
            r[tag] = themes
    return r

def write_tags(tags, bkp=True):
    for tag in tags:
        tags[tag] = list(tags[tag])

    if bkp:
        shutil.copyfile(TAGS_FILE, TAGS_FILE + '.bkp')

    try:
        with open(TAGS_FILE, 'w') as f:
            json.dump(tags, f)
    except:
        if bkp:
            shutil.copyfile(TAGS_FILE + '.bkp', TAGS_FILE)
        raise Error('unable to save tags')

parser = ArgumentParser(description='''
Utility for easily changing termite theme.
''')

parser.add_argument('--themes-dir',
    default=DEFAULT_THEMES_DIR,
    help='''Directory containing theming configuration files. The default value
    for this option is ttaken from the environemnt variable TERMITE_THEMES if
    set, otherwise ~/termite-themes is used.'''
)

subparsers = parser.add_subparsers()

sub = subparsers.add_parser('next')
sub.add_argument('pattern',
    nargs='?',
)
def cmd_next(args):
    themes = get_themes(args, args.pattern)
    if not themes:
        return 1

    current = get_current_theme()
    try:
        i = themes.index(current)
    except ValueError:
        i = -1

    i = (i + 1) % len(themes)
    set_theme(args, themes[i])
    reload_current_windows()
    print(themes[i])
    return 0
sub.set_defaults(func=cmd_next)

sub = subparsers.add_parser('prev')
sub.add_argument('pattern',
    nargs='?',
)
def cmd_prev(args):
    themes = get_themes(args, args.pattern)
    if not themes:
        return 1

    current = get_current_theme()
    try:
        i = themes.index(current)
    except ValueError:
        i = 0

    i += -1
    set_theme(args, themes[i])
    reload_current_windows()
    print(themes[i])
    return 0
sub.set_defaults(func=cmd_prev)

sub = subparsers.add_parser('list')
sub.add_argument('pattern',
    nargs='?',
)
def cmd_list(args):
    for theme in get_themes(args, args.pattern):
        print(theme)
sub.set_defaults(func=cmd_list)

sub = subparsers.add_parser('current')
def cmd_current(args):
    current = get_current_theme()
    if current is None:
        return 1
    print(current)
    return 0
sub.set_defaults(func=cmd_current)

sub = subparsers.add_parser('tag')
sub.add_argument('tags',
    default=[],
    nargs='*',
)
sub.add_argument('--add',
    default=[],
    action='append',
    nargs='+',
)
sub.add_argument('--remove',
    default=[],
    action='append',
    nargs='+',
)
sub.add_argument('--theme', nargs=1)
sub.add_argument('--list',
    default=SUPPRESS,
    nargs='?',
)
sub.add_argument('-v', action='store_true')
def cmd_tag(args):
    changed = False

    if args.theme:
        themes = get_themes(args, args.theme[0])
    else:
        current = get_current_theme()
        themes = [current] if current is not None else []
    themes = set(themes)

    l = []
    for m in args.add:
        l.extend(m)
    args.add = l

    args.add = set(args.add) | set(args.tags)

    tags = load_tags(args)

    for tag in args.add:
        if tag not in tags:
            tags[tag] = set()
        if themes - tags[tag]:
            tags[tag].update(themes)
            changed = True

    l = []
    for m in args.remove:
        l.extend(m)
    args.remove = l

    if args.remove:
        l = list(tags.keys())
        for pattern in args.remove:
            l = fnmatch.filter(l, pattern)
        args.remove = set(l)

    for tag in args.remove:
        if tag not in tags:
            continue
        if themes & tags[tag]:
            tags[tag].difference_update(themes)
            if not tags[tag]:
                del tags[tag]
            changed = True

    if changed:
        write_tags(tags)

    if hasattr(args, 'list'):
        for tag in sorted(tags):
            if args.v:
                print('{}: {}'.format(tag, ' '.join(tags[tag])))
            else:
                print(tag)

sub.set_defaults(func=cmd_tag)

args = parser.parse_args()

if not os.path.isdir(args.themes_dir):
    parser.error('{} is not a directory'.format(args.themes_dir))

if os.path.exists(DATA_DIR):
    if not os.path.isdir(DATA_DIR):
        parser.error('{} is not a directory'.format(DATA_DIR))
else:
    try:
        os.makedirs(DATA_DIR)
    except:
        parser.error('unable to create directory {}'.format(DATA_DIR))

try:
    r = args.func(args) or 0
except Error as e:
    print('error: {}'.format(str(e)), file=sys.stderr)
    r = 1

exit(r)
