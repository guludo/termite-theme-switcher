#!/bin/env python

from argparse import ArgumentParser
from glob import glob
import json
import os
import os.path
import shutil
import subprocess
import sys

HOME = os.path.expanduser('~')
DEFAULT_THEMES_DIR = os.getenv('TERMITE_THEMES', os.path.join(HOME, 'termite-themes'))
TERMITE_CONFIG_FILE = os.path.join(HOME, '.config', 'termite', 'config')
DATA_DIR = os.path.join(HOME, '.termite-tools', 'theme')
CURRENT_THEME_FILE = os.path.join(DATA_DIR, 'current')

class Error(Exception):
    pass

def get_themes(args, pattern=None, full_path=False):
    if pattern is None:
        pattern = '*'
    else:
        pattern = '*{}*'.format(pattern)

    return [
        (path if full_path else path[len(args.themes_dir) + len(os.path.sep):])
        for path in sorted(glob(os.path.join(args.themes_dir, pattern)))
    ]

def get_current_theme():
    try:
        with open(CURRENT_THEME_FILE) as f:
            return str(f.read()).strip()
    except:
        return None

def find_section_slice(lines, name):
    begin = -1
    for i, line in enumerate(lines):
        line = line.strip()
        if begin == -1:
            if line.startswith('[{}]'.format(name)):
                begin = i
        else:
            if line and line[0] == '[':
                return slice(begin, i)
    if begin >= 0:
        return slice(begin, len(lines))

    return None

def find_theme_path(args, name):
    l = get_themes(args, name, full_path=True)
    if not l:
        raise Error('theme {} not found'.format(name))
    if len(l) > 1:
        raise Error('more than one match for theme {}'.format(name))
    return l[0]

def set_theme(args, name):
    path = find_theme_path(args, name)
    with open(TERMITE_CONFIG_FILE) as f:
        config_lines = f.readlines()

    with open(path) as f:
        theme_lines = f.readlines()

    config_slice = find_section_slice(config_lines, 'colors')
    if not config_slice:
        config_slice = slice(len(config_lines), len(config_lines))

    theme_slice = find_section_slice(theme_lines, 'colors')
    if not theme_slice:
        raise Error('unable to find [colors] section in {}'.format(path))

    config_lines[config_slice] = theme_lines[theme_slice]

    shutil.copyfile(TERMITE_CONFIG_FILE, os.path.join(DATA_DIR, 'termite.bkp.conf'))

    with open(TERMITE_CONFIG_FILE, 'w') as f:
        f.writelines(config_lines)

    with open(os.path.join(CURRENT_THEME_FILE), 'w') as f:
        print(path[len(args.themes_dir) + len(os.path.sep):], end='', file=f)

def reload_current_windows():
    if os.getenv('XDG_SESSION_TYPE') == 'x11':
        subprocess.check_call('termite-reload-x-windows')

parser = ArgumentParser(description='''
Utility for easily changing termite theme.
''')

parser.add_argument('--themes-dir',
    default=DEFAULT_THEMES_DIR,
    help='''Directory containing theming configuration files. The default value
    for this option is ttaken from the environemnt variable TERMITE_THEMES if
    set, otherwise ~/termite-themes is used.'''
)

subparsers = parser.add_subparsers()

sub = subparsers.add_parser('next')
sub.add_argument('pattern',
    nargs='?',
)
def next_theme(args):
    themes = get_themes(args, args.pattern)
    if not themes:
        return 1

    current = get_current_theme()
    try:
        i = themes.index(current)
    except ValueError:
        i = -1

    i = (i + 1) % len(themes)
    set_theme(args, themes[i])
    reload_current_windows()
    print(themes[i])
    return 0
sub.set_defaults(func=next_theme)

sub = subparsers.add_parser('prev')
sub.add_argument('pattern',
    nargs='?',
)
def prev_theme(args):
    themes = get_themes(args, args.pattern)
    if not themes:
        return 1

    current = get_current_theme()
    try:
        i = themes.index(current)
    except ValueError:
        i = 0

    i += -1
    set_theme(args, themes[i])
    reload_current_windows()
    print(themes[i])
    return 0
sub.set_defaults(func=prev_theme)

sub = subparsers.add_parser('current')
def current_theme_cmd(args):
    current = get_current_theme()
    if current is None:
        return 1
    print(current)
    return 0
sub.set_defaults(func=current_theme_cmd)

args = parser.parse_args()

if not os.path.isdir(args.themes_dir):
    parser.error('{} is not a directory'.format(args.themes_dir))

if os.path.exists(DATA_DIR):
    if not os.path.isdir(DATA_DIR):
        parser.error('{} is not a directory'.format(DATA_DIR))
else:
    try:
        os.makedirs(DATA_DIR)
    except:
        parser.error('unable to create directory {}'.format(DATA_DIR))

try:
    r = args.func(args) or 0
except Error as e:
    print('error: {}'.format(str(e)), file=sys.stderr)
    r = 1

exit(r)
